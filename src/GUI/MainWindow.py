# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from src.GUI.LoginWindow import *
from src.GUI.SettingsWindow import *
import time
from src.GUI.FileAnalysisWindow import *
from src.GUI.AboutWindow import Ui_About
from hashlib import md5
from src.Algorithm.DecisionTree import *
from PyQt5.QtWidgets import QWidget
from datetime import date
class MainWindow(QWidget):


    def setupUi(self,user_password):
        self.setObjectName("MainWindow")
        self.setFixedSize(914, 591)
        self.setFixedSize(self.width(),self.height())
        self.user_menu = QtWidgets.QFrame(self)
        self.user_menu.setGeometry(QtCore.QRect(50, 210, 160, 281))
        self.user_menu.setStyleSheet("")
        self.user_menu.setObjectName("user_menu")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.user_menu)
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem1)
        self.settings_button = QtWidgets.QPushButton(self.user_menu)
        self.settings_button.setObjectName("settings_button")
        self.verticalLayout.addWidget(self.settings_button)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem2)
        self.log_out_button = QtWidgets.QPushButton(self.user_menu)
        self.log_out_button.setObjectName("log_out_button")
        self.verticalLayout.addWidget(self.log_out_button)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem3)
        self.horizontalFrame = QtWidgets.QFrame(self)
        self.horizontalFrame.setGeometry(QtCore.QRect(220, 100, 491, 81))
        self.horizontalFrame.setObjectName("horizontalFrame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalFrame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.home_button = QtWidgets.QPushButton(self.horizontalFrame)
        self.home_button.setObjectName("home_button")
        self.horizontalLayout.addWidget(self.home_button)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem4)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem5)
        self.file_analysis_button = QtWidgets.QPushButton(self.horizontalFrame)
        self.file_analysis_button.setObjectName("file_analysis_button")
        self.data_vis_button = QtWidgets.QPushButton("Data visualisation")
        self.data_vis_button.setObjectName("data_vis_button")
        self.horizontalLayout.addWidget(self.file_analysis_button)
        self.horizontalLayout.addWidget(self.data_vis_button)
        self.about_button = QtWidgets.QPushButton(self.horizontalFrame)
        self.about_button.setObjectName("about_button")
        self.horizontalLayout.addWidget(self.about_button)
        self.logo_label = QtWidgets.QLabel(self)
        self.logo_label.setGeometry(QtCore.QRect(240, 190, 521, 291))
        self.logo_label.setText("")
        self.logo_label.setObjectName("logo_label")
        self.logo_icon = QtGui.QPixmap('images/app_logo_v1.png')
        self.logo_label.setPixmap(self.logo_icon)
        self.logo_label.move(300, 200)
        # self.user_label = QtWidgets.QLabel(self)
        # self.user_label.setGeometry(QtCore.QRect(80, 100, 91, 81))
        # self.user_label.setAutoFillBackground(False)
        # self.user_label.setStyleSheet("")
        # self.user_label.setText("")
        # self.user_label.setObjectName("user_label")
        # self.user_icon = QtGui.QPixmap('images/user_icon_logo.png')
        self.callableMainWindow = lambda:self.closeMainWindow(user_password)
        self.log_out_button.clicked.connect(self.callableMainWindow)
        self.retranslateUi()
        self.date_hor_frame = QtWidgets.QFrame(self)
        self.date_hor_frame.move(20,10)
        self.date_time_layout = QtWidgets.QVBoxLayout(self.date_hor_frame)
        self.date_label = QtWidgets.QLabel("Date")
        self.date_label.setFont(QtGui.QFont("Verdana",18))
        self.date = QtWidgets.QLabel(str(date.today()))
        self.date_time_layout.addWidget(self.date_label)
        self.date_time_layout.addWidget(self.date)

        self.algo = Tree()
        QtCore.QMetaObject.connectSlotsByName(self)
        self.setStyleSheet(

           
        'QWidget{'+
        'background-color: #8a2be2;}'+
        ''+
        
        'QPushButton:hover{'+
        'background-color:#9966cc;'+
        'color:white;}'+
        ''
        'QLabel{'+
        'color:#d8bfd8;}'
        )
            
        
        
        self.callableSettings = lambda:self.openSettings(user_password)
        self.settings_button.clicked.connect(self.callableSettings)
        self.time_label = QtWidgets.QLabel()
        self.time_label.setText("")
        self.file_analysis_button.clicked.connect(self.openFileAnalysisWindow)
        self.about_button.clicked.connect(self.openAboutWindow)
        self.data_vis_button.clicked.connect(self.openVisualisation)
    
    
    def openAboutWindow(self):
        self.about_window = Ui_About()
        self.about_window.setupUi()
        self.about_window.runUi()
        
    def openFileAnalysisWindow(self):
        self.file_analysis_win = Ui_FileAnalysis()
        self.file_analysis_win.setupUi(self.algo)
        self.file_analysis_win.runUi()
    
    def openSettings(self,user_password):

        self.settingsWindow = Ui_Settings()
        self.settingsWindow.setupUi(user_password)
        self.settingsWindow.runUi()
    
    def openVisualisation(self):
        self.database = Database()
        if len(self.database.fetchAllFiles()) ==0:
            self.file_warning_window = QtWidgets.QDialog()
            self.file_warning_label = QtWidgets.QLabel("No file present on database. Please import a file first")
            self.file_warning_window.setLayout(QtWidgets.QVBoxLayout())
            self.btns = QtWidgets.QDialogButtonBox.Cancel
            self.btn_bx = QtWidgets.QDialogButtonBox(self.btns)
            self.btn_bx.rejected.connect(self.file_warning_window.close)
            self.file_warning_window.layout().addWidget(self.file_warning_label)
            self.file_warning_window.layout().addWidget(self.btn_bx)
            self.file_warning_window.show()
            self.database.closeConnection()
        
        elif not self.algo.isCompleted():
            self.file_not_analysed = QtWidgets.QDialog()
            self.file_not_analysed_label = QtWidgets.QLabel("File is not analysed. Please proceed with analysis first")
            self.file_not_analysed.setLayout(QtWidgets.QVBoxLayout())
            self.btns = QtWidgets.QDialogButtonBox.Cancel
            self.btn_bx = QtWidgets.QDialogButtonBox(self.btns)
            self.btn_bx.rejected.connect(self.file_not_analysed.close)
            self.file_not_analysed.layout().addWidget(self.file_not_analysed_label)
            self.file_not_analysed.layout().addWidget(self.btn_bx)
            self.file_not_analysed.show()
            self.database.closeConnection()

        else:
            self.array = self.algo.getData()
            self.plt = plt
            self.plt.scatter(self.array[0],self.array[1],color="blue")
            self.plt.scatter(self.array[2],self.array[3],color="red")
            self.plt.show()

    def closeMainWindow(self,user_password):
        self.database = Database()
        self.string = md5(user_password.encode())
        self.hashed = self.string.hexdigest()
        self.database.runRandomQuery("update user set active_account = false where user_password = ?",(self.hashed,))
        self.database.closeConnection()
        self.close()
        
        
    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "Main Window"))
        self.settings_button.setText(_translate("MainWindow", "Settings"))
        self.log_out_button.setText(_translate("MainWindow", "Log out"))
        self.home_button.setText(_translate("MainWindow", "Home"))
        self.file_analysis_button.setText(_translate("MainWindow", "File analysis"))
        self.data_vis_button.setText(_translate("MainWindow", "Data visualization"))
        self.about_button.setText(_translate("MainWindow", "About"))
    
    def runUi(self):
        self.show()

