# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LoginWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QLabel, QWidget
from src.GUI.MainWindow import MainWindow
from src.GUI.RegisterWindow import Ui_RegisterWindow
from src.Model.Database import *
from time import sleep
from src.Model.User import *
from sqlite3 import Error
from PyQt5.QtWidgets import QMainWindow
from hashlib import md5


class Ui_loginWindow(QMainWindow):

    _connected = False
    _valid_account = False

    def __init__(self, parent=None):
        super().__init__(parent)

    def setupUi(self):
        self.setObjectName("MainWindow")
        self.setFixedSize(800, 600)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(250, 90, 261, 211))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.verticalLayoutWidget.move(270,157)
        self.user_name_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.user_name_label.setObjectName("user_nane_label")
        self.verticalLayout.addWidget(self.user_name_label)
        self.user_name_text = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.user_name_text.setMaxLength(255)
        self.user_name_text.setObjectName("user_name_text")
        self.verticalLayout.addWidget(self.user_name_text)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem)
        self.password_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.password_label.setObjectName("password_label")
        self.verticalLayout.addWidget(self.password_label)
        self.password_text = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.password_text.setMaxLength(255)
        self.password_text.setObjectName("password_text")
        self.verticalLayout.addWidget(self.password_text)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem1)
        self.login_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.login_button.setObjectName("login_button")
        self.login_button.setText("Login")
        self.login_button.clicked.connect(self.connectToDB)
        self.register_button = QtWidgets.QPushButton("Register new user")
        self.register_button.clicked.connect(self.openRegisterWindow)
        self.verticalLayout.addWidget(self.login_button)
        self.verticalLayout.addWidget(self.register_button)
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.retranslateUi()
        self.setStyleSheet(
        
        'QWidget{'+
        'background-color: #00ffff;}'+
        ''+
        
        'QLineEdit{'+
        'border:1px groove black;'+
        'border-radius:4px;'+
        '}'+
        ''+


        'QPushButton:hover{'+
        'background-color:black;'+
        'color:white;}'+
        ''+

        'QLabel{'+
        'font-family:verdana;'+
        'font-size:15px;}'+
        ''
        
        )
        QtCore.QMetaObject.connectSlotsByName(self)
        

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("LoginWindow", "Login Window"))
        self.user_name_label.setText(_translate("MainWindow", "User name"))
        self.password_label.setText(_translate("MainWindow", "User password"))
        self.login_button.setText(_translate("MainWindow", "Log in"))

    def openRegisterWindow(self):
        self.register_win = Ui_RegisterWindow()
        self.register_win.setupUi()
        self.register_win.runUi()

    def setValidAccount(self,state=False):
        self._valid_account = state
    
    def getValidAccount(self):
        return self._valid_account
    
    def openUnknownUserWindow(self):
        self.unknown_window = QtWidgets.QDialog()
        self.buttons = QtWidgets.QDialogButtonBox.Ok
        self.unknown_window.setLayout(QtWidgets.QVBoxLayout())
        self.button_bx = QtWidgets.QDialogButtonBox(self.buttons)
        self.unknown_label = QtWidgets.QLabel("No user exists in database. Please proceed with registration")
        self.button_bx.accepted.connect(self.unknown_window.accept)
        self.unknown_window.layout().addWidget(self.unknown_label)
        self.unknown_window.layout().addWidget(self.button_bx)
        self.unknown_window.show()

    def connectToDB(self):
        try:
            self.database = Database()

            self.user_name = self.user_name_text.text()
            self.user_password = self.password_text.text()           
            self.users = self.database.fetchAllUsers()
            self.string = md5(self.password_text.text().encode())
            self.hashed_value = self.string.hexdigest()
            for user in self.users:
                if  user[3].__eq__(self.user_name_text.text()) and user[4].__eq__(self.hashed_value):
                    self._connected= True
                    break
            if not self._connected:
                    self.openWrongCredentialsWindow()
                    self.database.closeConnection()

            else:

                self.database.runRandomQuery("update  user set active_account = true where user_name = ? and user_password = ?"
                ,(self.user_name_text.text(),self.hashed_value))        

                self.mainWindow = MainWindow()
                self.mainWindow.setupUi(self.password_text.text())
                self.mainWindow.runUi()
                self.close()
            


        except Exception as e:
            print(e)
            return

    
    def openWrongCredentialsWindow(self):
        self.wrong_cred = QtWidgets.QDialog()
        self.buttons = QtWidgets.QDialogButtonBox.Cancel
        self.wrong_cred.setLayout(QtWidgets.QVBoxLayout())
        self.button_bx = QtWidgets.QDialogButtonBox(self.buttons)
        self.wrong_cred_label = QtWidgets.QLabel("Wrong credentials")
        self.button_bx.rejected.connect(self.wrong_cred.reject)
        self.wrong_cred.layout().addWidget(self.wrong_cred_label)
        self.wrong_cred.layout().addWidget(self.button_bx)
        self.wrong_cred.show()


    
    def runUi(self):
            self.show()
            self.database = Database()
            try:
                self.user_data = self.database.fetchAllUsers()
                if len(self.user_data) == 0:
                    self.openUnknownUserWindow()
            except Exception as e:
                print(e)
            
            finally:
                self.database.closeConnection()
            

