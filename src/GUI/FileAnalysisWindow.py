# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FileAnalysisWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import time
from datetime import date
from src.GUI.FIleProps import *
import json
from src.Model.File import *
from src.Model.Database import *
from src.Algorithm.DecisionTree import *
import random,platform,os
from src.GUI.TreeWindow import *
class Ui_FileAnalysis(QtWidgets.QWidget):

    _flag = False
    _completed = False
    _pressed = False
    _file = ""


    def setupUi(self,algo):
        self.setObjectName("FileAnalysis")
        self.setFixedSize(789, 536)
        self.frame = QtWidgets.QFrame(self)
        self.frame.setGeometry(QtCore.QRect(10, 10, 761, 511))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalFrame = QtWidgets.QFrame(self.frame)
        self.verticalFrame.setGeometry(QtCore.QRect(135, 80, 501, 251))
        self.verticalFrame.setObjectName("verticalFrame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalFrame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalFrame = QtWidgets.QFrame(self.verticalFrame)
        self.horizontalFrame.setObjectName("horizontalFrame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalFrame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.file_name_label = QtWidgets.QLabel(self.horizontalFrame)
        self.file_name_label.setObjectName("file_name_label")
        self.horizontalLayout.addWidget(self.file_name_label)
        self.file_size_label = QtWidgets.QLabel(self.horizontalFrame)
        self.file_size_label.setObjectName("file_size_label")
        self.horizontalLayout.addWidget(self.file_size_label)
        self.date_added_label = QtWidgets.QLabel(self.horizontalFrame)
        self.date_added_label.setObjectName("date_added_label")
        self.horizontalLayout.addWidget(self.date_added_label)
        self.verticalLayout.addWidget(self.horizontalFrame)
        self.horizontalFrame_2 = QtWidgets.QFrame(self.verticalFrame)
        self.horizontalFrame_2.setObjectName("horizontalFrame_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalFrame_2)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.file_name_text = QtWidgets.QLineEdit(self.horizontalFrame_2)
        self.file_name_text.setObjectName("file_name_text")
        self.horizontalLayout_2.addWidget(self.file_name_text)
        self.file_size_text = QtWidgets.QLineEdit(self.horizontalFrame_2)
        self.file_size_text.setObjectName("file_size_text")
        self.horizontalLayout_2.addWidget(self.file_size_text)
        self.date_added_text = QtWidgets.QLineEdit(self.horizontalFrame_2)
        self.date_added_text.setObjectName("date_added_text")
        self.horizontalLayout_2.addWidget(self.date_added_text)
        self.verticalLayout.addWidget(self.horizontalFrame_2)
        self.horizontalFrame1 = QtWidgets.QFrame(self.verticalFrame)
        self.horizontalFrame1.setObjectName("horizontalFrame1")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalFrame1)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.open_file_button = QtWidgets.QPushButton(self.horizontalFrame1)
        self.open_file_button.setObjectName("open_file_button")
        self.horizontalLayout_3.addWidget(self.open_file_button)
        self.cancel_button = QtWidgets.QPushButton(self.horizontalFrame1)
        self.cancel_button.setObjectName("cancel_button")
        self.horizontalLayout_3.addWidget(self.cancel_button)
        self.verticalLayout.addWidget(self.horizontalFrame1)
        self.start_analysis_button = QtWidgets.QPushButton(self.verticalFrame)
        self.start_analysis_button.setObjectName("start_analysis_button")
        self.verticalLayout.addWidget(self.start_analysis_button)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem)
        self.progressBar = QtWidgets.QProgressBar(self.verticalFrame)
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout.addWidget(self.progressBar)
        self.progressBar.setVisible(False)
        self.file_name_text.setEnabled(False)
        self.file_size_text.setEnabled(False)
        self.date_added_text.setEnabled(False)
        self.import_file_button = QtWidgets.QPushButton("Import file")
        self.horizontalLayout_3.layout().addWidget(self.import_file_button)
        self.import_file_button.clicked.connect(self.importFileProps)
        self.open_file_button.clicked.connect(self.openFileDialog)
        self.cancel_button.clicked.connect(self.cancelFile)
        self.start_analysis_button.clicked.connect(self.fileAnalysis)
        self.algo = algo
        self.setStyleSheet(


  
        'QWidget{'+
        'background-color: #8a2be2;}'+
        ''+
        
        'QLineEdit{'+
        'border:1px groove white;'+
        'border-radius:4px;'+
        '}'+
        ''+


        'QPushButton:hover{'+
        'color:white;}'+
        ''+

        'QLabel{'+
        'color:#fff0f5;'+
        'font-family:verdana;'+
        'font-size:15px;}'+
        ''

        )
        
        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)
    
    
    def importFileProps(self):

        if not self.checkFileProps():
            self.openWrongFileFormatWindow()
        elif not self.checkForEmptyFile():
            try:


                self._file  = File()
                self._file.setFileName(self.file_name_text.text())
                self._file.setFileSize(self.file_size_text.text())
                self._file.setDateAdded(self.date_added_text.text())
                self._file.setFileId()


                
                self.database = Database()
                self.count =0
    
                if self.database.saveFile(self._file):
                    self.setFlag(True)
                    self.buildInfoDialog()            
                else:
                    self.error_file_window = QtWidgets.QDialog()
                    self.error_file_label = QtWidgets.QLabel('File could not be imported. Please try again.')
                    self.standard_btns = QtWidgets.QDialogButtonBox.Cancel
                    self.error_file_window.setLayout(QtWidgets.QVBoxLayout())
                    self.btn_box = QtWidgets.QDialogButtonBox(self.standard_btns)
                    self.btn_box.rejected.connect(self.error_file_window.close)
                    self.error_file_window.layout().addWidget(self.error_file_label)
                    self.error_file_window.layout().addWidget(self.btn_box)
                    self.error_file_window.show()   
        
                self.database.closeConnection()   
            
            except Exception as e:
                print(e)
            
              

        else:
            self.noFileSelectedWindow()


    

    def buildInfoDialog(self):
        if self.checkFileProps():

            self.info_window = QtWidgets.QDialog()
            self.info_label = QtWidgets.QLabel('Your file was imported')
            self.standard_btns = QtWidgets.QDialogButtonBox.Ok
            self.info_window.setLayout(QtWidgets.QVBoxLayout())
            self.btn_box = QtWidgets.QDialogButtonBox(self.standard_btns)
            self.btn_box.accepted.connect(self.openFilePropWindow)
            self.info_window.layout().addWidget(self.info_label)
            self.info_window.layout().addWidget(self.btn_box)
            self.info_window.show()               
    

        elif self.checkForEmptyFile():
            self.noFileSelectedWindow()


    def openFilePropWindow(self):
        self.info_window.hide()
        self.filePropsWin = Ui_FileProps()
        self.filePropsWin.setupUi()
        self.filePropsWin.setFileProps(self._file)
        self.filePropsWin.runUi()


    def checkForEmptyFile(self):
        return self.file_name_text.text().__eq__("") or self.file_size_text.text().__eq__("") or self.date_added_text.text().__eq__("")


    def checkFileProps(self):
        return self.file_name_text.text().__contains__('.xlsx')
       
    
    def openWrongFileFormatWindow(self):
        if self.checkForEmptyFile():
            self.noFileSelectedWindow()
        else:
            self.error_file_dialog = QtWidgets.QDialog()
            self.error_file_label = QtWidgets.QLabel('The format of selected file is not supported by the system')
            self.standard_btns = QtWidgets.QDialogButtonBox.Cancel
            self.button_box = QtWidgets.QDialogButtonBox(self.standard_btns)
            self.verti_layout = QtWidgets.QVBoxLayout()
            self.error_file_dialog.setLayout(self.verti_layout)
            self.error_file_dialog.layout().addWidget(self.error_file_label)
            self.button_box.rejected.connect(self.error_file_dialog.reject)
            self.error_file_dialog.layout().addWidget(self.button_box)
            self.error_file_dialog.show()
            
    


    def openFileDialog(self):
        self.fileDialog = QtWidgets.QFileDialog()
        self.file_name = self.fileDialog.getOpenFileName(None,'Open file')
        self.file_name_text.setText(self.file_name[0])
        self.file_size_text.setText(str(os.path.getsize(self.file_name[0]))+"bytes")
        self.date_added_text.setText(str(date.today()))

    def cancelFile(self):
        if self.checkForEmptyFile():
            self.noFileSelectedWindow()
        else:
            self.file_name_text.setText("")
            self.file_size_text.setText("")
            self.date_added_text.setText("")

    
    def fileAnalysis(self,algo):
        if platform.system() == "Windows":
            self.command_result = os.system('cmd /c "where magick && where dot"')
            if self.command_result == 1:
                self.openNotInstalledProgram()
            else:
                if self.file_name_text.text().__eq__("") or self.file_name_text.text().__eq__("") or self.date_added_text.text().__eq__(""):
                    self.no_file_selected_window = QtWidgets.QDialog()
                    self.no_file_selected_label = QtWidgets.QLabel("No file was selected")
                    self.btn_box = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Cancel)
                    self.btn_box.rejected.connect(self.no_file_selected_window.close)
                    self.no_file_selected_window.setLayout(QtWidgets.QVBoxLayout())
                    self.no_file_selected_window.layout().addWidget(self.no_file_selected_label)
                    self.no_file_selected_window.layout().addWidget(self.btn_box)
                    self.no_file_selected_window.show()
                    return

                elif self.getFlag() == False:
                    self.file_not_imported = QtWidgets.QDialog()
                    self.file_no_imported_label = QtWidgets.QLabel("File was not imported")
                    self.btn_box = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Cancel)
                    self.btn_box.rejected.connect(self.file_not_imported.close)
                    self.file_not_imported.setLayout(QtWidgets.QVBoxLayout())
                    self.file_not_imported.layout().addWidget(self.file_no_imported_label)
                    self.file_not_imported.layout().addWidget(self.btn_box)
                    self.file_not_imported.show()
                else:

                    self.algo.setprops(self._file.getFileName())

                    while self.progressBar.value() <100:
                            self.progressBar.show()
                            self.progressBar.setValue(self.count+10)
                            self.count+=10
                            time.sleep(1)
                    
                    if  self.count == 100:
                    
                        self.algo.setCompleted(True)
                        self.analysisCompletionWindow()

                self.setFlag(False)
        else:
            self.command = os.system("which dot")
            if self.command == 256:
                self.openNotInstalledProgram()
            else:
                 if self.file_name_text.text().__eq__("") or self.file_name_text.text().__eq__("") or self.date_added_text.text().__eq__(""):
                    self.no_file_selected_window = QtWidgets.QDialog()
                    self.no_file_selected_label = QtWidgets.QLabel("No file was selected")
                    self.btn_box = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Cancel)
                    self.btn_box.rejected.connect(self.no_file_selected_window.close)
                    self.no_file_selected_window.setLayout(QtWidgets.QVBoxLayout())
                    self.no_file_selected_window.layout().addWidget(self.no_file_selected_label)
                    self.no_file_selected_window.layout().addWidget(self.btn_box)
                    self.no_file_selected_window.show()
                    return

                 elif self.getFlag() == False:
                    self.file_not_imported = QtWidgets.QDialog()
                    self.file_no_imported_label = QtWidgets.QLabel("File was not imported")
                    self.btn_box = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Cancel)
                    self.btn_box.rejected.connect(self.file_not_imported.close)
                    self.file_not_imported.setLayout(QtWidgets.QVBoxLayout())
                    self.file_not_imported.layout().addWidget(self.file_no_imported_label)
                    self.file_not_imported.layout().addWidget(self.btn_box)
                    self.file_not_imported.show()
                 else:

                    self.algo.setprops(self._file.getFileName())

                    while self.progressBar.value() <100:
                            self.progressBar.show()
                            self.progressBar.setValue(self.count+10)
                            self.count+=10
                            time.sleep(1)
                    
                    if self.count == 100:
                    
                        self.algo.setCompleted(True)
                        self.analysisCompletionWindow()

                 self.setFlag(False)


                            
        
    def setFlag(self,flag_status):
        self._flag = flag_status
    
    def getFlag(self):
        return self._flag


    def noFileSelectedWindow(self):
        self.file_error_window = QtWidgets.QDialog()
        self.file_error_window.setWindowTitle("File error window")
        self.file_error_label = QtWidgets.QLabel('No file was selected.')
        self.standard_btns = QtWidgets.QDialogButtonBox.Cancel
        self.btn_box = QtWidgets.QDialogButtonBox(self.standard_btns)
        self.ver_layout = QtWidgets.QVBoxLayout()
        self.file_error_window.setLayout(self.ver_layout)
        self.btn_box.rejected.connect(self.file_error_window.close)
        self.file_error_window.layout().addWidget(self.file_error_label)
        self.file_error_window.layout().addWidget(self.btn_box)
        self.file_error_window.show()    

        
    def analysisCompletionWindow(self):

        self.completion_window = QtWidgets.QDialog()
        self.completion_label = QtWidgets.QLabel("Analysis successfully completed",None)
        self.completion_window.move(self.verticalFrame.width(),self.verticalFrame.height())
        self.verticallyout = QtWidgets.QVBoxLayout()
        self.btns = QtWidgets.QDialogButtonBox.Ok
        self.btn_box = QtWidgets.QDialogButtonBox(self.btns)
        self.callable = lambda:self.showGeneratedData(self.completion_window)
        self.btn_box.accepted.connect(self.callable)
        self.completion_window.setLayout(self.verticallyout)
        self.completion_window.layout().addWidget(self.completion_label)
        self.completion_window.layout().addWidget(self.btn_box)
        self.completion_window.setFixedSize(260, 100)
        self.completion_window.show()
    
    def showGeneratedData(self,window):
        self.close()
        window.close()
        self.export = self.algo.exportData()
        self.win = Ui_Tree()
        self.win.setupUi()
        self.win.runUi()

    def runUi(self):
        self.show()

    def openNotInstalledProgram(self):
        self.program_not_installed = QtWidgets.QDialog()
        self.btns = QtWidgets.QDialogButtonBox.Cancel
        self.btn_box = QtWidgets.QDialogButtonBox(self.btns)
        self.program_not_installed.setLayout(QtWidgets.QVBoxLayout())
        self.info_label = QtWidgets.QLabel("Image magick or Graphviz is not installed. Please proceed with installation")
        self.program_not_installed.layout().addWidget(self.info_label)
        self.program_not_installed.layout().addWidget(self.btn_box)
        self.btn_box.rejected.connect(self.program_not_installed.close)
        self.program_not_installed.show()  

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("FileAnalysis", "File Analysis Window"))
        self.file_name_label.setText(_translate("FileAnalysis", "File name"))
        self.file_size_label.setText(_translate("FileAnalysis", "File size"))
        self.date_added_label.setText(_translate("FileAnalysis", "Date added"))
        self.open_file_button.setText(_translate("FileAnalysis", "Open file"))
        self.cancel_button.setText(_translate("FileAnalysis", "Cancel"))
        self.start_analysis_button.setText(_translate("FileAnalysis", "Start analysis"))

